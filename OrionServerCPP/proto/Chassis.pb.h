// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chassis.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Chassis_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Chassis_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Chassis_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Chassis_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chassis_2eproto;
class ChassisData;
class ChassisDataDefaultTypeInternal;
extern ChassisDataDefaultTypeInternal _ChassisData_default_instance_;
class ChassisFeedback;
class ChassisFeedbackDefaultTypeInternal;
extern ChassisFeedbackDefaultTypeInternal _ChassisFeedback_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ChassisData* Arena::CreateMaybeMessage<::ChassisData>(Arena*);
template<> ::ChassisFeedback* Arena::CreateMaybeMessage<::ChassisFeedback>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ChassisData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChassisData) */ {
 public:
  ChassisData();
  virtual ~ChassisData();

  ChassisData(const ChassisData& from);
  ChassisData(ChassisData&& from) noexcept
    : ChassisData() {
    *this = ::std::move(from);
  }

  inline ChassisData& operator=(const ChassisData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisData& operator=(ChassisData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisData* internal_default_instance() {
    return reinterpret_cast<const ChassisData*>(
               &_ChassisData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChassisData& a, ChassisData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisData* New() const final {
    return CreateMaybeMessage<ChassisData>(nullptr);
  }

  ChassisData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisData& from);
  void MergeFrom(const ChassisData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChassisData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chassis_2eproto);
    return ::descriptor_table_Chassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // double velocity = 1;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // double rotation = 2;
  void clear_rotation();
  double rotation() const;
  void set_rotation(double value);
  private:
  double _internal_rotation() const;
  void _internal_set_rotation(double value);
  public:

  // @@protoc_insertion_point(class_scope:ChassisData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double velocity_;
  double rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chassis_2eproto;
};
// -------------------------------------------------------------------

class ChassisFeedback :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ChassisFeedback) */ {
 public:
  ChassisFeedback();
  virtual ~ChassisFeedback();

  ChassisFeedback(const ChassisFeedback& from);
  ChassisFeedback(ChassisFeedback&& from) noexcept
    : ChassisFeedback() {
    *this = ::std::move(from);
  }

  inline ChassisFeedback& operator=(const ChassisFeedback& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChassisFeedback& operator=(ChassisFeedback&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChassisFeedback& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChassisFeedback* internal_default_instance() {
    return reinterpret_cast<const ChassisFeedback*>(
               &_ChassisFeedback_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChassisFeedback& a, ChassisFeedback& b) {
    a.Swap(&b);
  }
  inline void Swap(ChassisFeedback* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChassisFeedback* New() const final {
    return CreateMaybeMessage<ChassisFeedback>(nullptr);
  }

  ChassisFeedback* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChassisFeedback>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChassisFeedback& from);
  void MergeFrom(const ChassisFeedback& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChassisFeedback* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ChassisFeedback";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Chassis_2eproto);
    return ::descriptor_table_Chassis_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorDescriptionFieldNumber = 6,
    kLeftPowerFieldNumber = 1,
    kRightPowerFieldNumber = 2,
    kErrorCodeFieldNumber = 5,
  };
  // string errorDescription = 6;
  void clear_errordescription();
  const std::string& errordescription() const;
  void set_errordescription(const std::string& value);
  void set_errordescription(std::string&& value);
  void set_errordescription(const char* value);
  void set_errordescription(const char* value, size_t size);
  std::string* mutable_errordescription();
  std::string* release_errordescription();
  void set_allocated_errordescription(std::string* errordescription);
  private:
  const std::string& _internal_errordescription() const;
  void _internal_set_errordescription(const std::string& value);
  std::string* _internal_mutable_errordescription();
  public:

  // int32 leftPower = 1;
  void clear_leftpower();
  ::PROTOBUF_NAMESPACE_ID::int32 leftpower() const;
  void set_leftpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leftpower() const;
  void _internal_set_leftpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 rightPower = 2;
  void clear_rightpower();
  ::PROTOBUF_NAMESPACE_ID::int32 rightpower() const;
  void set_rightpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rightpower() const;
  void _internal_set_rightpower(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 errorCode = 5;
  void clear_errorcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode() const;
  void set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errorcode() const;
  void _internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ChassisFeedback)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errordescription_;
  ::PROTOBUF_NAMESPACE_ID::int32 leftpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 rightpower_;
  ::PROTOBUF_NAMESPACE_ID::int32 errorcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Chassis_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChassisData

// double velocity = 1;
inline void ChassisData::clear_velocity() {
  velocity_ = 0;
}
inline double ChassisData::_internal_velocity() const {
  return velocity_;
}
inline double ChassisData::velocity() const {
  // @@protoc_insertion_point(field_get:ChassisData.velocity)
  return _internal_velocity();
}
inline void ChassisData::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void ChassisData::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:ChassisData.velocity)
}

// double rotation = 2;
inline void ChassisData::clear_rotation() {
  rotation_ = 0;
}
inline double ChassisData::_internal_rotation() const {
  return rotation_;
}
inline double ChassisData::rotation() const {
  // @@protoc_insertion_point(field_get:ChassisData.rotation)
  return _internal_rotation();
}
inline void ChassisData::_internal_set_rotation(double value) {
  
  rotation_ = value;
}
inline void ChassisData::set_rotation(double value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:ChassisData.rotation)
}

// -------------------------------------------------------------------

// ChassisFeedback

// int32 leftPower = 1;
inline void ChassisFeedback::clear_leftpower() {
  leftpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::_internal_leftpower() const {
  return leftpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::leftpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.leftPower)
  return _internal_leftpower();
}
inline void ChassisFeedback::_internal_set_leftpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leftpower_ = value;
}
inline void ChassisFeedback::set_leftpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leftpower(value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.leftPower)
}

// int32 rightPower = 2;
inline void ChassisFeedback::clear_rightpower() {
  rightpower_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::_internal_rightpower() const {
  return rightpower_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::rightpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.rightPower)
  return _internal_rightpower();
}
inline void ChassisFeedback::_internal_set_rightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rightpower_ = value;
}
inline void ChassisFeedback::set_rightpower(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rightpower(value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.rightPower)
}

// int32 errorCode = 5;
inline void ChassisFeedback::clear_errorcode() {
  errorcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::_internal_errorcode() const {
  return errorcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChassisFeedback::errorcode() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorCode)
  return _internal_errorcode();
}
inline void ChassisFeedback::_internal_set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errorcode_ = value;
}
inline void ChassisFeedback::set_errorcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorCode)
}

// string errorDescription = 6;
inline void ChassisFeedback::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChassisFeedback::errordescription() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorDescription)
  return _internal_errordescription();
}
inline void ChassisFeedback::set_errordescription(const std::string& value) {
  _internal_set_errordescription(value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorDescription)
}
inline std::string* ChassisFeedback::mutable_errordescription() {
  // @@protoc_insertion_point(field_mutable:ChassisFeedback.errorDescription)
  return _internal_mutable_errordescription();
}
inline const std::string& ChassisFeedback::_internal_errordescription() const {
  return errordescription_.GetNoArena();
}
inline void ChassisFeedback::_internal_set_errordescription(const std::string& value) {
  
  errordescription_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChassisFeedback::set_errordescription(std::string&& value) {
  
  errordescription_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChassisFeedback.errorDescription)
}
inline void ChassisFeedback::set_errordescription(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errordescription_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChassisFeedback.errorDescription)
}
inline void ChassisFeedback::set_errordescription(const char* value, size_t size) {
  
  errordescription_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChassisFeedback.errorDescription)
}
inline std::string* ChassisFeedback::_internal_mutable_errordescription() {
  
  return errordescription_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChassisFeedback::release_errordescription() {
  // @@protoc_insertion_point(field_release:ChassisFeedback.errorDescription)
  
  return errordescription_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChassisFeedback::set_allocated_errordescription(std::string* errordescription) {
  if (errordescription != nullptr) {
    
  } else {
    
  }
  errordescription_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:ChassisFeedback.errorDescription)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Chassis_2eproto
