// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chassis.proto

#ifndef PROTOBUF_Chassis_2eproto__INCLUDED
#define PROTOBUF_Chassis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Chassis_2eproto();
void protobuf_AssignDesc_Chassis_2eproto();
void protobuf_ShutdownFile_Chassis_2eproto();

class ChassisData;
class ChassisFeedback;

// ===================================================================

class ChassisData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChassisData) */ {
 public:
  ChassisData();
  virtual ~ChassisData();

  ChassisData(const ChassisData& from);

  inline ChassisData& operator=(const ChassisData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisData& default_instance();

  void Swap(ChassisData* other);

  // implements Message ----------------------------------------------

  inline ChassisData* New() const { return New(NULL); }

  ChassisData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChassisData& from);
  void MergeFrom(const ChassisData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChassisData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double velocity = 1;
  void clear_velocity();
  static const int kVelocityFieldNumber = 1;
  double velocity() const;
  void set_velocity(double value);

  // optional double rotation = 2;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  double rotation() const;
  void set_rotation(double value);

  // @@protoc_insertion_point(class_scope:ChassisData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double velocity_;
  double rotation_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Chassis_2eproto();
  friend void protobuf_AssignDesc_Chassis_2eproto();
  friend void protobuf_ShutdownFile_Chassis_2eproto();

  void InitAsDefaultInstance();
  static ChassisData* default_instance_;
};
// -------------------------------------------------------------------

class ChassisFeedback : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChassisFeedback) */ {
 public:
  ChassisFeedback();
  virtual ~ChassisFeedback();

  ChassisFeedback(const ChassisFeedback& from);

  inline ChassisFeedback& operator=(const ChassisFeedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChassisFeedback& default_instance();

  void Swap(ChassisFeedback* other);

  // implements Message ----------------------------------------------

  inline ChassisFeedback* New() const { return New(NULL); }

  ChassisFeedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChassisFeedback& from);
  void MergeFrom(const ChassisFeedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChassisFeedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 leftPower = 1;
  void clear_leftpower();
  static const int kLeftPowerFieldNumber = 1;
  ::google::protobuf::int32 leftpower() const;
  void set_leftpower(::google::protobuf::int32 value);

  // optional int32 rightPower = 2;
  void clear_rightpower();
  static const int kRightPowerFieldNumber = 2;
  ::google::protobuf::int32 rightpower() const;
  void set_rightpower(::google::protobuf::int32 value);

  // optional int32 errorCode = 5;
  void clear_errorcode();
  static const int kErrorCodeFieldNumber = 5;
  ::google::protobuf::int32 errorcode() const;
  void set_errorcode(::google::protobuf::int32 value);

  // optional string errorDescription = 6;
  void clear_errordescription();
  static const int kErrorDescriptionFieldNumber = 6;
  const ::std::string& errordescription() const;
  void set_errordescription(const ::std::string& value);
  void set_errordescription(const char* value);
  void set_errordescription(const char* value, size_t size);
  ::std::string* mutable_errordescription();
  ::std::string* release_errordescription();
  void set_allocated_errordescription(::std::string* errordescription);

  // @@protoc_insertion_point(class_scope:ChassisFeedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 leftpower_;
  ::google::protobuf::int32 rightpower_;
  ::google::protobuf::internal::ArenaStringPtr errordescription_;
  ::google::protobuf::int32 errorcode_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Chassis_2eproto();
  friend void protobuf_AssignDesc_Chassis_2eproto();
  friend void protobuf_ShutdownFile_Chassis_2eproto();

  void InitAsDefaultInstance();
  static ChassisFeedback* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisData

// optional double velocity = 1;
inline void ChassisData::clear_velocity() {
  velocity_ = 0;
}
inline double ChassisData::velocity() const {
  // @@protoc_insertion_point(field_get:ChassisData.velocity)
  return velocity_;
}
inline void ChassisData::set_velocity(double value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:ChassisData.velocity)
}

// optional double rotation = 2;
inline void ChassisData::clear_rotation() {
  rotation_ = 0;
}
inline double ChassisData::rotation() const {
  // @@protoc_insertion_point(field_get:ChassisData.rotation)
  return rotation_;
}
inline void ChassisData::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:ChassisData.rotation)
}

// -------------------------------------------------------------------

// ChassisFeedback

// optional int32 leftPower = 1;
inline void ChassisFeedback::clear_leftpower() {
  leftpower_ = 0;
}
inline ::google::protobuf::int32 ChassisFeedback::leftpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.leftPower)
  return leftpower_;
}
inline void ChassisFeedback::set_leftpower(::google::protobuf::int32 value) {
  
  leftpower_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.leftPower)
}

// optional int32 rightPower = 2;
inline void ChassisFeedback::clear_rightpower() {
  rightpower_ = 0;
}
inline ::google::protobuf::int32 ChassisFeedback::rightpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.rightPower)
  return rightpower_;
}
inline void ChassisFeedback::set_rightpower(::google::protobuf::int32 value) {
  
  rightpower_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.rightPower)
}

// optional int32 errorCode = 5;
inline void ChassisFeedback::clear_errorcode() {
  errorcode_ = 0;
}
inline ::google::protobuf::int32 ChassisFeedback::errorcode() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorCode)
  return errorcode_;
}
inline void ChassisFeedback::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorCode)
}

// optional string errorDescription = 6;
inline void ChassisFeedback::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChassisFeedback::errordescription() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorDescription)
  return errordescription_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChassisFeedback::set_errordescription(const ::std::string& value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorDescription)
}
inline void ChassisFeedback::set_errordescription(const char* value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChassisFeedback.errorDescription)
}
inline void ChassisFeedback::set_errordescription(const char* value, size_t size) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChassisFeedback.errorDescription)
}
inline ::std::string* ChassisFeedback::mutable_errordescription() {
  
  // @@protoc_insertion_point(field_mutable:ChassisFeedback.errorDescription)
  return errordescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChassisFeedback::release_errordescription() {
  // @@protoc_insertion_point(field_release:ChassisFeedback.errorDescription)
  
  return errordescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChassisFeedback::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    
  } else {
    
  }
  errordescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:ChassisFeedback.errorDescription)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Chassis_2eproto__INCLUDED
