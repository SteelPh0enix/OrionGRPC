// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chassis.proto

#include "Chassis.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class ChassisDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisData> _instance;
} _ChassisData_default_instance_;
class ChassisFeedbackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChassisFeedback> _instance;
} _ChassisFeedback_default_instance_;
static void InitDefaultsscc_info_ChassisData_Chassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChassisData_default_instance_;
    new (ptr) ::ChassisData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChassisData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisData_Chassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChassisData_Chassis_2eproto}, {}};

static void InitDefaultsscc_info_ChassisFeedback_Chassis_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ChassisFeedback_default_instance_;
    new (ptr) ::ChassisFeedback();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ChassisFeedback::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChassisFeedback_Chassis_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChassisFeedback_Chassis_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Chassis_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Chassis_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Chassis_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Chassis_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChassisData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChassisData, velocity_),
  PROTOBUF_FIELD_OFFSET(::ChassisData, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ChassisFeedback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ChassisFeedback, leftpower_),
  PROTOBUF_FIELD_OFFSET(::ChassisFeedback, rightpower_),
  PROTOBUF_FIELD_OFFSET(::ChassisFeedback, errorcode_),
  PROTOBUF_FIELD_OFFSET(::ChassisFeedback, errordescription_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ChassisData)},
  { 7, -1, sizeof(::ChassisFeedback)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChassisData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ChassisFeedback_default_instance_),
};

const char descriptor_table_protodef_Chassis_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rChassis.proto\"1\n\013ChassisData\022\020\n\010veloci"
  "ty\030\001 \001(\001\022\020\n\010rotation\030\002 \001(\001\"e\n\017ChassisFee"
  "dback\022\021\n\tleftPower\030\001 \001(\005\022\022\n\nrightPower\030\002"
  " \001(\005\022\021\n\terrorCode\030\005 \001(\005\022\030\n\020errorDescript"
  "ion\030\006 \001(\t29\n\016ChassisService\022\'\n\005Drive\022\014.C"
  "hassisData\032\020.ChassisFeedbackb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Chassis_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Chassis_2eproto_sccs[2] = {
  &scc_info_ChassisData_Chassis_2eproto.base,
  &scc_info_ChassisFeedback_Chassis_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Chassis_2eproto_once;
static bool descriptor_table_Chassis_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Chassis_2eproto = {
  &descriptor_table_Chassis_2eproto_initialized, descriptor_table_protodef_Chassis_2eproto, "Chassis.proto", 236,
  &descriptor_table_Chassis_2eproto_once, descriptor_table_Chassis_2eproto_sccs, descriptor_table_Chassis_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_Chassis_2eproto::offsets,
  file_level_metadata_Chassis_2eproto, 2, file_level_enum_descriptors_Chassis_2eproto, file_level_service_descriptors_Chassis_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Chassis_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Chassis_2eproto), true);

// ===================================================================

void ChassisData::InitAsDefaultInstance() {
}
class ChassisData::_Internal {
 public:
};

ChassisData::ChassisData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChassisData)
}
ChassisData::ChassisData(const ChassisData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(rotation_));
  // @@protoc_insertion_point(copy_constructor:ChassisData)
}

void ChassisData::SharedCtor() {
  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(rotation_));
}

ChassisData::~ChassisData() {
  // @@protoc_insertion_point(destructor:ChassisData)
  SharedDtor();
}

void ChassisData::SharedDtor() {
}

void ChassisData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisData& ChassisData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisData_Chassis_2eproto.base);
  return *internal_default_instance();
}


void ChassisData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChassisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(rotation_));
  _internal_metadata_.Clear();
}

const char* ChassisData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChassisData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double velocity = 1;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_velocity(), target);
  }

  // double rotation = 2;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChassisData)
  return target;
}

size_t ChassisData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChassisData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity = 1;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation = 2;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChassisData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChassisData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChassisData)
    MergeFrom(*source);
  }
}

void ChassisData::MergeFrom(const ChassisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChassisData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (!(from.rotation() <= 0 && from.rotation() >= 0)) {
    _internal_set_rotation(from._internal_rotation());
  }
}

void ChassisData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChassisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisData::CopyFrom(const ChassisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChassisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisData::IsInitialized() const {
  return true;
}

void ChassisData::InternalSwap(ChassisData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(velocity_, other->velocity_);
  swap(rotation_, other->rotation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChassisFeedback::InitAsDefaultInstance() {
}
class ChassisFeedback::_Internal {
 public:
};

ChassisFeedback::ChassisFeedback()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChassisFeedback)
}
ChassisFeedback::ChassisFeedback(const ChassisFeedback& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errordescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errordescription().empty()) {
    errordescription_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
  ::memcpy(&leftpower_, &from.leftpower_,
    static_cast<size_t>(reinterpret_cast<char*>(&errorcode_) -
    reinterpret_cast<char*>(&leftpower_)) + sizeof(errorcode_));
  // @@protoc_insertion_point(copy_constructor:ChassisFeedback)
}

void ChassisFeedback::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChassisFeedback_Chassis_2eproto.base);
  errordescription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leftpower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&leftpower_)) + sizeof(errorcode_));
}

ChassisFeedback::~ChassisFeedback() {
  // @@protoc_insertion_point(destructor:ChassisFeedback)
  SharedDtor();
}

void ChassisFeedback::SharedDtor() {
  errordescription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChassisFeedback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChassisFeedback& ChassisFeedback::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChassisFeedback_Chassis_2eproto.base);
  return *internal_default_instance();
}


void ChassisFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ChassisFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errordescription_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&leftpower_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorcode_) -
      reinterpret_cast<char*>(&leftpower_)) + sizeof(errorcode_));
  _internal_metadata_.Clear();
}

const char* ChassisFeedback::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 leftPower = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          leftpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rightPower = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rightpower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errorCode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorDescription = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_errordescription(), ptr, ctx, "ChassisFeedback.errorDescription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChassisFeedback::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChassisFeedback)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 leftPower = 1;
  if (this->leftpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_leftpower(), target);
  }

  // int32 rightPower = 2;
  if (this->rightpower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rightpower(), target);
  }

  // int32 errorCode = 5;
  if (this->errorcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_errorcode(), target);
  }

  // string errorDescription = 6;
  if (this->errordescription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errordescription().data(), static_cast<int>(this->_internal_errordescription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ChassisFeedback.errorDescription");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_errordescription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChassisFeedback)
  return target;
}

size_t ChassisFeedback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChassisFeedback)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorDescription = 6;
  if (this->errordescription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errordescription());
  }

  // int32 leftPower = 1;
  if (this->leftpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_leftpower());
  }

  // int32 rightPower = 2;
  if (this->rightpower() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rightpower());
  }

  // int32 errorCode = 5;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errorcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChassisFeedback::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChassisFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  const ChassisFeedback* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChassisFeedback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChassisFeedback)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChassisFeedback)
    MergeFrom(*source);
  }
}

void ChassisFeedback::MergeFrom(const ChassisFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChassisFeedback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errordescription().size() > 0) {

    errordescription_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
  if (from.leftpower() != 0) {
    _internal_set_leftpower(from._internal_leftpower());
  }
  if (from.rightpower() != 0) {
    _internal_set_rightpower(from._internal_rightpower());
  }
  if (from.errorcode() != 0) {
    _internal_set_errorcode(from._internal_errorcode());
  }
}

void ChassisFeedback::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChassisFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisFeedback::CopyFrom(const ChassisFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChassisFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeedback::IsInitialized() const {
  return true;
}

void ChassisFeedback::InternalSwap(ChassisFeedback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errordescription_.Swap(&other->errordescription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(leftpower_, other->leftpower_);
  swap(rightpower_, other->rightpower_);
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChassisFeedback::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ChassisData* Arena::CreateMaybeMessage< ::ChassisData >(Arena* arena) {
  return Arena::CreateInternal< ::ChassisData >(arena);
}
template<> PROTOBUF_NOINLINE ::ChassisFeedback* Arena::CreateMaybeMessage< ::ChassisFeedback >(Arena* arena) {
  return Arena::CreateInternal< ::ChassisFeedback >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
