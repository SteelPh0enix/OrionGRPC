// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ChassisData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChassisData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChassisFeedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChassisFeedback_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Chassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Chassis_2eproto() {
  protobuf_AddDesc_Chassis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Chassis.proto");
  GOOGLE_CHECK(file != NULL);
  ChassisData_descriptor_ = file->message_type(0);
  static const int ChassisData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisData, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisData, rotation_),
  };
  ChassisData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChassisData_descriptor_,
      ChassisData::default_instance_,
      ChassisData_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChassisData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisData, _is_default_instance_));
  ChassisFeedback_descriptor_ = file->message_type(1);
  static const int ChassisFeedback_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, leftpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, rightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, errordescription_),
  };
  ChassisFeedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChassisFeedback_descriptor_,
      ChassisFeedback::default_instance_,
      ChassisFeedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(ChassisFeedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChassisFeedback, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Chassis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChassisData_descriptor_, &ChassisData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChassisFeedback_descriptor_, &ChassisFeedback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Chassis_2eproto() {
  delete ChassisData::default_instance_;
  delete ChassisData_reflection_;
  delete ChassisFeedback::default_instance_;
  delete ChassisFeedback_reflection_;
}

void protobuf_AddDesc_Chassis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Chassis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rChassis.proto\"1\n\013ChassisData\022\020\n\010veloci"
    "ty\030\001 \001(\001\022\020\n\010rotation\030\002 \001(\001\"e\n\017ChassisFee"
    "dback\022\021\n\tleftPower\030\001 \001(\005\022\022\n\nrightPower\030\002"
    " \001(\005\022\021\n\terrorCode\030\005 \001(\005\022\030\n\020errorDescript"
    "ion\030\006 \001(\t29\n\016ChassisService\022\'\n\005Drive\022\014.C"
    "hassisData\032\020.ChassisFeedbackb\006proto3", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chassis.proto", &protobuf_RegisterTypes);
  ChassisData::default_instance_ = new ChassisData();
  ChassisFeedback::default_instance_ = new ChassisFeedback();
  ChassisData::default_instance_->InitAsDefaultInstance();
  ChassisFeedback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Chassis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Chassis_2eproto {
  StaticDescriptorInitializer_Chassis_2eproto() {
    protobuf_AddDesc_Chassis_2eproto();
  }
} static_descriptor_initializer_Chassis_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisData::kVelocityFieldNumber;
const int ChassisData::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisData::ChassisData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChassisData)
}

void ChassisData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChassisData::ChassisData(const ChassisData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChassisData)
}

void ChassisData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  velocity_ = 0;
  rotation_ = 0;
}

ChassisData::~ChassisData() {
  // @@protoc_insertion_point(destructor:ChassisData)
  SharedDtor();
}

void ChassisData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChassisData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChassisData_descriptor_;
}

const ChassisData& ChassisData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chassis_2eproto();
  return *default_instance_;
}

ChassisData* ChassisData::default_instance_ = NULL;

ChassisData* ChassisData::New(::google::protobuf::Arena* arena) const {
  ChassisData* n = new ChassisData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisData::Clear() {
// @@protoc_insertion_point(message_clear_start:ChassisData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChassisData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChassisData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(velocity_, rotation_);

#undef ZR_HELPER_
#undef ZR_

}

bool ChassisData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChassisData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double velocity = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &velocity_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_rotation;
        break;
      }

      // optional double rotation = 2;
      case 2: {
        if (tag == 17) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChassisData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChassisData)
  return false;
#undef DO_
}

void ChassisData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChassisData)
  // optional double velocity = 1;
  if (this->velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->velocity(), output);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->rotation(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChassisData)
}

::google::protobuf::uint8* ChassisData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChassisData)
  // optional double velocity = 1;
  if (this->velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->velocity(), target);
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->rotation(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChassisData)
  return target;
}

int ChassisData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChassisData)
  int total_size = 0;

  // optional double velocity = 1;
  if (this->velocity() != 0) {
    total_size += 1 + 8;
  }

  // optional double rotation = 2;
  if (this->rotation() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChassisData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChassisData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChassisData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChassisData)
    MergeFrom(*source);
  }
}

void ChassisData::MergeFrom(const ChassisData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChassisData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.velocity() != 0) {
    set_velocity(from.velocity());
  }
  if (from.rotation() != 0) {
    set_rotation(from.rotation());
  }
}

void ChassisData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChassisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisData::CopyFrom(const ChassisData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChassisData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisData::IsInitialized() const {

  return true;
}

void ChassisData::Swap(ChassisData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisData::InternalSwap(ChassisData* other) {
  std::swap(velocity_, other->velocity_);
  std::swap(rotation_, other->rotation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChassisData_descriptor_;
  metadata.reflection = ChassisData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisData

// optional double velocity = 1;
void ChassisData::clear_velocity() {
  velocity_ = 0;
}
 double ChassisData::velocity() const {
  // @@protoc_insertion_point(field_get:ChassisData.velocity)
  return velocity_;
}
 void ChassisData::set_velocity(double value) {
  
  velocity_ = value;
  // @@protoc_insertion_point(field_set:ChassisData.velocity)
}

// optional double rotation = 2;
void ChassisData::clear_rotation() {
  rotation_ = 0;
}
 double ChassisData::rotation() const {
  // @@protoc_insertion_point(field_get:ChassisData.rotation)
  return rotation_;
}
 void ChassisData::set_rotation(double value) {
  
  rotation_ = value;
  // @@protoc_insertion_point(field_set:ChassisData.rotation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisFeedback::kLeftPowerFieldNumber;
const int ChassisFeedback::kRightPowerFieldNumber;
const int ChassisFeedback::kErrorCodeFieldNumber;
const int ChassisFeedback::kErrorDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisFeedback::ChassisFeedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ChassisFeedback)
}

void ChassisFeedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ChassisFeedback::ChassisFeedback(const ChassisFeedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ChassisFeedback)
}

void ChassisFeedback::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  leftpower_ = 0;
  rightpower_ = 0;
  errorcode_ = 0;
  errordescription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ChassisFeedback::~ChassisFeedback() {
  // @@protoc_insertion_point(destructor:ChassisFeedback)
  SharedDtor();
}

void ChassisFeedback::SharedDtor() {
  errordescription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChassisFeedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChassisFeedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChassisFeedback_descriptor_;
}

const ChassisFeedback& ChassisFeedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chassis_2eproto();
  return *default_instance_;
}

ChassisFeedback* ChassisFeedback::default_instance_ = NULL;

ChassisFeedback* ChassisFeedback::New(::google::protobuf::Arena* arena) const {
  ChassisFeedback* n = new ChassisFeedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisFeedback::Clear() {
// @@protoc_insertion_point(message_clear_start:ChassisFeedback)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ChassisFeedback, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ChassisFeedback*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(leftpower_, rightpower_);
  errorcode_ = 0;
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ChassisFeedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ChassisFeedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leftPower = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftpower_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rightPower;
        break;
      }

      // optional int32 rightPower = 2;
      case 2: {
        if (tag == 16) {
         parse_rightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightpower_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_errorCode;
        break;
      }

      // optional int32 errorCode = 5;
      case 5: {
        if (tag == 40) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_errorDescription;
        break;
      }

      // optional string errorDescription = 6;
      case 6: {
        if (tag == 50) {
         parse_errorDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errordescription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errordescription().data(), this->errordescription().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ChassisFeedback.errorDescription"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ChassisFeedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ChassisFeedback)
  return false;
#undef DO_
}

void ChassisFeedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ChassisFeedback)
  // optional int32 leftPower = 1;
  if (this->leftpower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftpower(), output);
  }

  // optional int32 rightPower = 2;
  if (this->rightpower() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rightpower(), output);
  }

  // optional int32 errorCode = 5;
  if (this->errorcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->errorcode(), output);
  }

  // optional string errorDescription = 6;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChassisFeedback.errorDescription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->errordescription(), output);
  }

  // @@protoc_insertion_point(serialize_end:ChassisFeedback)
}

::google::protobuf::uint8* ChassisFeedback::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChassisFeedback)
  // optional int32 leftPower = 1;
  if (this->leftpower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->leftpower(), target);
  }

  // optional int32 rightPower = 2;
  if (this->rightpower() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rightpower(), target);
  }

  // optional int32 errorCode = 5;
  if (this->errorcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->errorcode(), target);
  }

  // optional string errorDescription = 6;
  if (this->errordescription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errordescription().data(), this->errordescription().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ChassisFeedback.errorDescription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->errordescription(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ChassisFeedback)
  return target;
}

int ChassisFeedback::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ChassisFeedback)
  int total_size = 0;

  // optional int32 leftPower = 1;
  if (this->leftpower() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->leftpower());
  }

  // optional int32 rightPower = 2;
  if (this->rightpower() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rightpower());
  }

  // optional int32 errorCode = 5;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errorcode());
  }

  // optional string errorDescription = 6;
  if (this->errordescription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errordescription());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisFeedback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ChassisFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChassisFeedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChassisFeedback>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ChassisFeedback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ChassisFeedback)
    MergeFrom(*source);
  }
}

void ChassisFeedback::MergeFrom(const ChassisFeedback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChassisFeedback)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.leftpower() != 0) {
    set_leftpower(from.leftpower());
  }
  if (from.rightpower() != 0) {
    set_rightpower(from.rightpower());
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
  if (from.errordescription().size() > 0) {

    errordescription_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errordescription_);
  }
}

void ChassisFeedback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ChassisFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChassisFeedback::CopyFrom(const ChassisFeedback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChassisFeedback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisFeedback::IsInitialized() const {

  return true;
}

void ChassisFeedback::Swap(ChassisFeedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisFeedback::InternalSwap(ChassisFeedback* other) {
  std::swap(leftpower_, other->leftpower_);
  std::swap(rightpower_, other->rightpower_);
  std::swap(errorcode_, other->errorcode_);
  errordescription_.Swap(&other->errordescription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChassisFeedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChassisFeedback_descriptor_;
  metadata.reflection = ChassisFeedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisFeedback

// optional int32 leftPower = 1;
void ChassisFeedback::clear_leftpower() {
  leftpower_ = 0;
}
 ::google::protobuf::int32 ChassisFeedback::leftpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.leftPower)
  return leftpower_;
}
 void ChassisFeedback::set_leftpower(::google::protobuf::int32 value) {
  
  leftpower_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.leftPower)
}

// optional int32 rightPower = 2;
void ChassisFeedback::clear_rightpower() {
  rightpower_ = 0;
}
 ::google::protobuf::int32 ChassisFeedback::rightpower() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.rightPower)
  return rightpower_;
}
 void ChassisFeedback::set_rightpower(::google::protobuf::int32 value) {
  
  rightpower_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.rightPower)
}

// optional int32 errorCode = 5;
void ChassisFeedback::clear_errorcode() {
  errorcode_ = 0;
}
 ::google::protobuf::int32 ChassisFeedback::errorcode() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorCode)
  return errorcode_;
}
 void ChassisFeedback::set_errorcode(::google::protobuf::int32 value) {
  
  errorcode_ = value;
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorCode)
}

// optional string errorDescription = 6;
void ChassisFeedback::clear_errordescription() {
  errordescription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ChassisFeedback::errordescription() const {
  // @@protoc_insertion_point(field_get:ChassisFeedback.errorDescription)
  return errordescription_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChassisFeedback::set_errordescription(const ::std::string& value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChassisFeedback.errorDescription)
}
 void ChassisFeedback::set_errordescription(const char* value) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChassisFeedback.errorDescription)
}
 void ChassisFeedback::set_errordescription(const char* value, size_t size) {
  
  errordescription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChassisFeedback.errorDescription)
}
 ::std::string* ChassisFeedback::mutable_errordescription() {
  
  // @@protoc_insertion_point(field_mutable:ChassisFeedback.errorDescription)
  return errordescription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChassisFeedback::release_errordescription() {
  // @@protoc_insertion_point(field_release:ChassisFeedback.errorDescription)
  
  return errordescription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChassisFeedback::set_allocated_errordescription(::std::string* errordescription) {
  if (errordescription != NULL) {
    
  } else {
    
  }
  errordescription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errordescription);
  // @@protoc_insertion_point(field_set_allocated:ChassisFeedback.errorDescription)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
