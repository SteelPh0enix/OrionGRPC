// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Chassis.proto

#include "Chassis.pb.h"
#include "Chassis.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* ChassisService_method_names[] = {
  "/ChassisService/Drive",
};

std::unique_ptr< ChassisService::Stub> ChassisService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ChassisService::Stub> stub(new ChassisService::Stub(channel));
  return stub;
}

ChassisService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Drive_(ChassisService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChassisService::Stub::Drive(::grpc::ClientContext* context, const ::ChassisData& request, ::ChassisFeedback* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Drive_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ChassisFeedback>* ChassisService::Stub::AsyncDriveRaw(::grpc::ClientContext* context, const ::ChassisData& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ChassisFeedback>(channel_.get(), cq, rpcmethod_Drive_, context, request);
}

ChassisService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      ChassisService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ChassisService::Service, ::ChassisData, ::ChassisFeedback>(
          std::mem_fn(&ChassisService::Service::Drive), this)));
}

ChassisService::Service::~Service() {
}

::grpc::Status ChassisService::Service::Drive(::grpc::ServerContext* context, const ::ChassisData* request, ::ChassisFeedback* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


